#!/usr/bin/env python3
#
# requirements.txt: namedlist prettytable requests xmltodict

"""Income statement filling automizer"""

import argparse
import csv
import datetime
import itertools
import re
import sys

from collections import OrderedDict
from decimal import Decimal
from typing import List, Type, TypeVar

import requests
import xmltodict

from namedlist import namedlist

from prettytable import PrettyTable

T = TypeVar("T")

# Ensure that assert is enabled and we can use it
try:
    assert False
except AssertionError:
    pass


class Error(Exception):
    def __init__(self, *args):
        message, args = args[0], args[1:]
        super().__init__(message.format(*args) if args else message)


class LogicalError(Exception):
    def __init__(self, message="Logical error."):
        super().__init__(message)


class CurrencyRates:
    __start_december_day = 30

    def __init__(self, *, mock=False):
        self.mock = mock
        self.__rates = {}

    def get(self, date):
        if self.mock:
            return Decimal()

        cur_date = date
        min_date = datetime.date(date.year - 1, 12, self.__start_december_day)
        rates = self.__get_rates(date.year)

        while True:
            try:
                return rates[cur_date]
            except KeyError:
                if cur_date <= min_date:
                    print(rates)
                    raise Error("Unable to find currency rates for {}.", date)

                cur_date = cur_date - datetime.timedelta(days=1)

    def __get_rates(self, year):
        try:
            return self.__rates[year]
        except KeyError:
            pass

        rates = {}
        url = "http://www.cbr.ru/scripts/XML_dynamic.asp?date_req1={}/12/{}&date_req2=31/12/{}&VAL_NM_RQ=R01235".format(
            self.__start_december_day, year - 1, year)

        for record in xmltodict.parse(requests.get(url).content)["ValCurs"]["Record"]:
            date = datetime.datetime.strptime(record["@Date"], "%d.%m.%Y").date()
            value = Decimal(record["Value"].replace(",", "."))
            rates[date] = value

        self.__rates[year] = rates

        return rates


class Dividend:
    def __init__(self, date, issuer, value, paid_taxes=None):
        self.date = date
        self.issuer = issuer
        self.value = value
        self.paid_taxes = paid_taxes or Decimal()

    def calculate(self, currency_rates: CurrencyRates):
        self.local_currency_rate = currency_rates.get(self.date)
        self.value_in_local_currency = _round_currency(self.value * self.local_currency_rate)
        self.paid_taxes_in_local_currency = _round_currency(self.paid_taxes * self.local_currency_rate)
        return self


class BrokerageIncome:
    def __init__(self, broker_name, currency_rates: CurrencyRates, dividends=None):
        self.broker_name = broker_name
        self.dividends = [dividend.calculate(currency_rates) for dividend in dividends or []]
        self.__currency_rates = currency_rates

    def print(self):
        print("\nРасчет дохода от дивидендов, полученных через " + self.broker_name)

        currency_columns = [
            "Сумма (USD)", "Курс руб.", "Сумма (руб)",
            "Уплачено (USD)", "Уплачено (руб)", "К доплате (руб)", "Реальный доход",
        ]

        table = PrettyTable(["Дата", "Эмитент", "Валюта"] + currency_columns)

        table.align["Эмитент"] = "l"
        for column_name in currency_columns:
            table.align[column_name] = "r"

        total_value = Decimal()
        total_value_in_local_currency = Decimal()

        total_paid_taxes = Decimal()
        total_paid_taxes_in_local_currency = Decimal()

        total_to_pay = Decimal()
        total_real_income = Decimal()

        for dividend in self.dividends:
            expected_taxes_in_local_currency = _round_currency(dividend.value_in_local_currency * Decimal("0.13"))
            to_pay = max(Decimal(), expected_taxes_in_local_currency - dividend.paid_taxes_in_local_currency)
            real_income = dividend.value_in_local_currency - dividend.paid_taxes_in_local_currency - to_pay

            total_value += dividend.value
            total_value_in_local_currency += dividend.value_in_local_currency

            total_paid_taxes += dividend.paid_taxes
            total_paid_taxes_in_local_currency += dividend.paid_taxes_in_local_currency

            total_to_pay += to_pay
            total_real_income += real_income

            table.add_row((
                dividend.date.strftime("%d.%m.%Y"), dividend.issuer, "USD",
                dividend.value, dividend.local_currency_rate, dividend.value_in_local_currency,
                dividend.paid_taxes, dividend.paid_taxes_in_local_currency, to_pay, real_income,
            ))

        table.add_row((
            "", "", "",
            total_value, "", total_value_in_local_currency,
            total_paid_taxes, total_paid_taxes_in_local_currency, total_to_pay, total_real_income,
        ))

        print(table.get_string())


class Record:
    def __init__(self, type, data=None):
        self.type = type
        self.data = data or []

    def add_data(self, data):
        self.data.append(data)

    def encode(self):
        return _encode_data("@" + self.type) + "".join(_encode_data(data) for data in self.data)

    def __repr__(self):
        return "<{}>({})".format(self.type, ", ".join(self.data))


def record_view(record_type, fields, with_index=None):
    fields = OrderedDict(fields)

    class RecordView(namedlist(record_type, fields.keys())):
        def __init__(self, record: Record):
            super().__init__(*(
                field_type.decode(value)
                for value, field_type in _safe_zip(record.data, fields.values())
            ))

        @staticmethod
        def get_type(index=None):
            assert (with_index is None) == (index is None)

            current_record_type = record_type
            if with_index is not None:
                current_record_type += str(index).rjust(with_index, "0")

            return current_record_type

        def to_record(self, index=None):
            return Record(self.get_type(index), [
                field_type.encode(value)
                for value, field_type in _safe_zip(self, fields.values())
            ])

    return RecordView


def _safe_zip(*iterables):
    fill_value = object()

    for chain in itertools.zip_longest(*iterables, fillvalue=fill_value):
        for value in chain:
            if value is fill_value:
                raise LogicalError("Iterable lengths don't match.")

        yield chain


class String:
    @staticmethod
    def encode(value):
        return value

    @staticmethod
    def decode(value):
        return value


class Bool:
    @staticmethod
    def encode(value):
        return "1" if value else "0"

    @staticmethod
    def decode(value):
        if value == "1":
            return True
        elif value == "0":
            return False
        else:
            raise ValueError(value)


class Integer:
    @staticmethod
    def encode(value: int):
        return str(value)

    @classmethod
    def decode(cls, string):
        value = int(string)

        if cls.encode(value) != string:
            raise ValueError(string)

        return value


class Date:
    __BASE_DATE = datetime.date(1899, 12, 30)

    @classmethod
    def encode(cls, date: datetime.date):
        return str((date - cls.__BASE_DATE).days)

    @classmethod
    def decode(cls, string):
        return cls.__BASE_DATE + datetime.timedelta(days=int(string))


class Currency:
    @staticmethod
    def encode(value: Decimal):
        rounded_value = _round_currency(value)
        assert rounded_value == value
        return str(rounded_value)

    @staticmethod
    def decode(string):
        return Decimal(string)


def _round_currency(value):
    rounded_value = round(Decimal(value), 2)
    return Decimal(int(rounded_value * 100)) / 100


class ForeignIncomeStatement(record_view("DeclForeign", (("incomes", Integer),))):
    pass


class ForeignIncome(record_view("CurrencyIncome", (
    ("unknown1", Integer),
    ("income_type", Integer),
    ("income_type_name", String),
    ("income_name", String),
    ("county_code", Integer),
    ("income_date", Date),
    ("tax_payment_date", Date),
    ("automatic_currency_converting", Bool),
    ("currency_code", Integer),
    ("currency_rate_for_income_date", Currency),
    ("currency_rate_units_for_income_date", Integer),
    ("currency_rate_for_tax_payment_date", Currency),
    ("currency_rate_units_for_tax_payment_date", Integer),
    ("currency_name", String),
    ("income_value", Currency),
    ("income_value_in_local_currency", Currency),
    ("paid_tax_value", Currency),
    ("paid_tax_value_in_local_currency", Currency),
    ("deduction_code", Integer),
    ("deduction_value", Currency),
    ("unknown2", String),
    ("company_type", String),
    ("unknown3", String),
), with_index=3)):
    pass


class Statement:
    def __init__(self, year, records: List[Record], currency_rates: CurrencyRates):
        self.records = records
        self.__year = year
        self.__currency_rates = currency_rates

    def dump(self):
        for record in self.records:
            print(record)

    def validate(self):
        self.__set_foreign_incomes(self.__get_foreign_incomes())
        return self

    def add_income(self, brokerage_income: BrokerageIncome):
        for dividend in brokerage_income.dividends:
            income = self.__get_dividend_template()

            income.income_name = "{}: Дивиденд от {}".format(brokerage_income.broker_name, dividend.issuer)
            income.income_date = income.tax_payment_date = dividend.date

            assert dividend.local_currency_rate.as_tuple().exponent == -4
            income.currency_rate_for_income_date = dividend.local_currency_rate * 100
            income.currency_rate_units_for_income_date = 100
            income.income_value = dividend.value
            income.income_value_in_local_currency = dividend.value_in_local_currency

            assert dividend.local_currency_rate.as_tuple().exponent == -4
            income.currency_rate_for_tax_payment_date = dividend.local_currency_rate * 100
            income.currency_rate_units_for_tax_payment_date = 100
            income.paid_tax_value = dividend.paid_taxes
            income.paid_tax_value_in_local_currency = dividend.paid_taxes_in_local_currency

            self.__add_foreign_income(income)

    def __get_dividend_template(self):
        template = self.__get_foreign_income_template("dividend")

        assert template.income_type == 1010
        assert template.income_type_name == "Дивиденды"

        return template

    def __get_foreign_income_template(self, name):
        for income in self.__get_foreign_incomes():
            if income.income_name == name:
                template = income
                break
        else:
            raise Error("Unable to find {!r} income in the statement.", name)

        for date in (template.income_date, template.tax_payment_date):
            assert date == datetime.date(self.__year, 1, 1)

        assert template.county_code == 840
        assert template.currency_code == 840
        assert template.currency_name == "Доллар сша"

        assert template.automatic_currency_converting is True
        assert template.currency_rate_units_for_income_date == 100
        assert template.currency_rate_units_for_tax_payment_date == 100
        if not self.__currency_rates.mock:
            assert template.currency_rate_for_income_date == self.__currency_rates.get(template.income_date) * 100
            assert template.currency_rate_for_tax_payment_date == self.__currency_rates.get(template.tax_payment_date) * 100

        return template

    def __add_foreign_income(self, income: ForeignIncome):
        self.__set_foreign_incomes(self.__get_foreign_incomes() + [income])

    def __get_foreign_incomes(self) -> List[ForeignIncome]:
        return [
            self.__get_record(ForeignIncome, income_id)
            for income_id in range(self.__get_record(ForeignIncomeStatement).incomes)
        ]

    def __set_foreign_incomes(self, incomes: List[ForeignIncome]):
        income_statement = self.__get_record(ForeignIncomeStatement)
        record_id = self.__get_record_id(ForeignIncomeStatement)

        record_ids = [record_id] + [
            self.__get_record_id(ForeignIncome, income_id)
            for income_id in range(income_statement.incomes)
        ]
        assert record_ids == list(range(record_id, record_id + income_statement.incomes + 1))

        income_statement.incomes = len(incomes)

        self.records[record_ids[0]:record_ids[-1] + 1] = [income_statement.to_record()] + [
            income.to_record(income_id)
            for income_id, income in enumerate(incomes)
        ]

    def __get_record(self, view: Type[T], index=None) -> T:
        return view(self.records[self.__get_record_id(view, index=index)])

    def __get_record_id(self, view, index=None):
        record_type = view.get_type(index=index)
        found_id = None

        for record_id, record in enumerate(self.records):
            if record.type != record_type:
                continue

            if found_id is not None:
                raise Error("There are multiple {!r} records.", record_type)

            found_id = record_id

        if found_id is None:
            raise Error("Unable to find {!r} record.", record_type)

        return found_id


class StatementParser:
    __encoding = "cp1251"
    __header_format = "DLSG            Decl{}0102FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
    __footer = "\0\0"

    def __init__(self, year, path, currency_rates: CurrencyRates):
        self.__year = year
        self.__header = self.__header_format.format(year)
        self.__currency_rates = currency_rates

        try:
            with open(path, "rb") as statement_file:
                self.__raw_data = statement_file.read()
        except OSError as e:
            raise Error("Error while reading {!r}: {}.", e.strerror)

        self.__data = self.__raw_data.decode(self.__encoding)
        self.__pos = 0

    def parse(self):
        header = self.__read(len(self.__header))
        if header != self.__header:
            raise Error("Got an unexpected header: {!r}.", header)

        records = []

        while True:
            data = self.__read_data()

            if data.startswith("@"):
                records.append(Record(data[1:]))
            else:
                try:
                    record = records[-1]
                except IndexError:
                    raise Error("Got an unexpected data: {!r}.", data)

                record.add_data(data)

                if record.type == "Nalog":
                    if len(record.data) == 1 and data == "0" and self.__data[self.__pos:] == self.__footer:
                        break

                    raise Error("Got an unexpected footer.")

        return Statement(self.__year, records, self.__currency_rates)

    def validate(self, statement: Statement):
        statement.validate()
        assert self.encode(statement) == self.__raw_data

    def encode(self, statement: Statement):
        data = self.__header + "".join(record.encode() for record in statement.records) + StatementParser.__footer
        return data.encode(self.__encoding)

    def __read_data(self):
        size = self.__read_data_size()
        return self.__read(size)

    def __read_data_size(self):
        pos = self.__pos
        size = self.__read(4)

        try:
            size = int(size)
            if size < 0:
                raise ValueError
        except ValueError:
            raise Error("Got an invalid data size at {}: {!r}.", pos, size)

        return size

    def __read(self, size):
        pos = self.__pos + size

        data = self.__data[self.__pos:pos]
        if len(data) != size:
            raise Error("Got an unexpected end of file.")

        self.__pos = pos
        return data


def _encode_data(data):
    return "{:04d}{}".format(len(data), data)


class IbBlock:
    def __init__(self, name, columns):
        self.name = name
        self.columns = columns
        self.data = []


def parse_ib_statement(path):
    statement = {}
    current_block = None

    try:
        with open(path) as statement_file:
            for line_id, line in enumerate(csv.reader(statement_file)):
                if line_id == 0 and line:
                    line[0] = line[0].lstrip("\ufeff")

                try:
                    block_name, data_type, *data = line
                except ValueError:
                    raise Error("Got an unexpected data: {!r}.", line)

                if data_type == "Header":
                    current_block = IbBlock(block_name, data)

                    if block_name in statement:
                        current_block.data = statement[block_name]
                    else:
                        statement[block_name] = current_block.data
                elif data_type == "Data":
                    if current_block is None or block_name != current_block.name:
                        raise Error("Got an unexpected data without block headers: {!r}.", line)

                    # This block is badly formatted, skipping it
                    if block_name == "Codes":
                        continue

                    current_block.data.append(dict(_safe_zip(current_block.columns, data)))
                elif data_type in ("Total", "SubTotal"):
                    if current_block is None or block_name != current_block.name:
                        raise Error("Got an unexpected {!r} data without block headers: {!r}.", data_type, line)
                else:
                    raise Error("Got an unexpected data: {!r}.", line)
    except (OSError, ValueError) as e:
        raise Error("Error while reading {!r}: {}.", path, e)
    except Error as e:
        raise Error("Error while reading {!r}: {}", path, e)

    return statement


def get_ib_brokerage_income(statement, currency_rates: CurrencyRates):
    tickers = {
        ticker_info["Symbol"]: ticker_info["Description"]
        for ticker_info in statement["Financial Instrument Information"]}

    taxes = {}

    for tax_info in strip_totals_from_ib_records(statement["Withholding Tax"], "Currency"):
        assert tax_info["Currency"] == "USD"

        date = parse_ib_date(tax_info["Date"])
        description = tax_info["Description"]

        amount = -Decimal(tax_info["Amount"])
        assert amount > 0

        key = (date, description)
        if key in taxes:
            raise Error("Duplicate tax: {}.", tax_info)

        taxes[key] = amount

    dividends = []
    dividend_description_suffix = " (Ordinary Dividend)"
    dividend_tax_description_suffix = " - US Tax"

    for dividend_info in strip_totals_from_ib_records(statement["Dividends"], "Currency"):
        assert dividend_info["Currency"] == "USD"

        date = parse_ib_date(dividend_info["Date"])

        description = dividend_info["Description"]
        if not description.endswith(dividend_description_suffix):
            raise Error("Unexpected dividend description: {!r}.", description)
        description = description[:-len(dividend_description_suffix)]

        ticker = [word for word in re.split(r"\b", description) if word.strip()][0]
        issuer = "{} ({})".format(tickers[ticker], ticker)

        amount = Decimal(dividend_info["Amount"])
        assert amount > 0

        try:
            paid_taxes = taxes.pop((date, description + dividend_tax_description_suffix))
        except KeyError:
            raise Error("Unable to find paid taxes info for {} dividend.", dividend_info)

        assert paid_taxes == _round_currency(amount * Decimal("0.1"))

        dividends.append(Dividend(date, issuer, amount, paid_taxes=paid_taxes))

    if taxes:
        raise Error("There are unhandled taxes: {}.", taxes)

    return BrokerageIncome("Interactive Brokers", currency_rates, dividends=dividends)


def parse_ib_date(date):
    return datetime.datetime.strptime(date, "%Y-%m-%d").date()


def strip_totals_from_ib_records(records, column):
    if records and records[-1][column] == "Total":
        records = records[:-1]

    return records


def parse_args():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--ib-statement", metavar="PATH", help="Interactive Brokers statement path")
    parser.add_argument("--income-statement", metavar="PATH", help="income statement path")
    parser.add_argument("--dump", action="store_true", help="dump the statement")
    parser.add_argument("--mock", action="store_true", help="mock currency rates")
    return parser.parse_args()


def main():
    try:
        args = parse_args()
        currency_rates = CurrencyRates(mock=args.mock)

        incomes = []
        if args.ib_statement is not None:
            incomes.append(get_ib_brokerage_income(parse_ib_statement(args.ib_statement), currency_rates))

        for income in incomes:
            income.print()

        if args.income_statement is not None:
            statement_path = args.income_statement

            match = re.search(r"\.dc(\d)", statement_path, re.IGNORECASE)
            if match is None:
                raise Error("Unsupported income statement file type.")
            statement_year = 2010 + int(match.group(1))

            parser = StatementParser(statement_year, statement_path, currency_rates)

            try:
                statement = parser.parse()
            except Error as e:
                raise Error("Failed to parse the income statement file: {}", e)

            if args.dump:
                print("\n\nOriginal statement:")
                statement.dump()

            parser.validate(statement)

            for income in incomes:
                statement.add_income(income)

            if args.dump:
                print("\n\nModified statement:")
                statement.dump()

            data = parser.encode(statement)

            try:
                with open(statement_path, "wb") as statement_file:
                    statement_file.write(data)
            except OSError as e:
                raise Error("Unable to write {!r}: {}.", statement_path, e.strerror)
    except Error as e:
        sys.exit("Error: {}".format(e))


if __name__ == "__main__":
    main()
